; Программа определения кол-ва элементов строки,
; превышающих код введенного символа
; (использование команды scas)
; Разработчик - Дубинин А. В.
; 21.05.2016

.model small ; модель памяти small
.386         ; режим работы микропроцессора

; сегмент стека (занимает 256 байтов)
.stack 256

; сегмент данных
.data
    msgStr db 'String: '            ; сообщение
    customStr db 'Example 2$'       ; исходная строка
    strLength = ($ - customStr) - 1 ; длина строки

    msgInput db 'Enter a symbol: $' ; сообщение о вводе символа
    msgResult db 'Number of elements greater than symbol = $' ; сообщение результата

    count db 0                      ; переменная для хранения результата
    br db 10,13,'$'                 ; переменная для перевода строки

; сегмент кода
.code
main:                       ; метка начала программы
    mov ax,@data            ; занесение адреса сегмента данных в регистр ax
    mov ds,ax               ; копирование содержимого регистра ax
    mov es,ax               ; в регистры ds и es
    xor ax,ax               ; обнуление регистра ax

    lea dx,msgStr           ; занесение в dx смещения переменной msgStr
    call DisplayMsg         ; вызов процедуры вывода исходной строки
    call NewLine            ; вызов процедуры перевода строки

    lea dx,msgInput         ; занесение в dx смещения переменной msgInput
    call DisplayMsg         ; вызов процедуры вывода сообщения (msgInput)

    mov ah,01h              ; занесение в ah функции 1
    int 21h                 ; вызов прерывания 21h
                            ; (ввод символа с клавиатуры и вывод его на экран,
                            ; в регистр al загружается код символа)

    mov di,offset customStr ; в di смещение строки
    mov cx,strLength        ; занесение в счетчик кол-ва элементов строки
    cld                     ; сброс в 0 флага направления (DF)

scan_str:                   ; метка сканирования строки
    rep scasb               ; сравнение введеного символа (в al) с каждым
                            ; элементом исходной строки customStr
    jb inc_count            ; если код символа меньше очередного элемента строки,
                            ; то переход на метку inc_count
    jcxz finish_scan        ; если сканирование строки завершено (cx = 0),
                            ; то переход на метку finish_scan

inc_count:                  ; метка увеличения кол-ва найденных элементов
    setb bl                 ; занесения в регистр bl признака сравнения кодов
                            ; введенного символа и очередного элемента строки
    add count,bl            ; добавление к переменной count единицы,
                            ; если код символа меньше, иначе добавление нуля
    jmp scan_str            ; переход к метке сканирования строки

finish_scan:                ; метка входа по завершению сканирования строки
    call NewLine            ; вызов процедуры перевода строки
    lea dx,msgResult        ; занесение в dx смещения переменной msgResult
    call DisplayMsg         ; вызов процедуры вывода сообщения (msgResult)

    add count,30h           ; добавлени числа 30 к переменной count для вывода
    mov dx,offset count     ; занесение в dx смещения переменной count
    call DisplayMsg         ; вызов процедуры вывода результата (count)

    mov ah,4ch              ; завершение работы программы, возврат в DOS
    int 21h                 ; вызов прерывания 21h

; процедура DisplayMsg
    DisplayMsg proc
        mov ah,09h          ; занесение в ah функции 9
        int 21h             ; вызов прерывания 21h, вывод информации
        xor dx,dx           ; обнуление используемых в процедуре
        xor ah,ah           ; регистров (dx, ah)
        ret                 ; возврат из процедуры
    DisplayMsg endp
; конец процедуры DisplayMsg

; процедура NewLine
    NewLine proc
        mov dl,offset br    ; занесение в dl смещения переменной перевода строки
        mov ah,09h          ; занесение в ah функции 9
        int 21h             ; вызов прерывания 21h, перевод строки
        xor dl,dl           ; обнуление используемых в процедуре
        xor ah,ah           ; регистров (dl, ah)
        ret                 ; возврат из процедуры
    NewLine endp
; конец процедуры NewLine

end main                    ; конец программы с точкой входа main